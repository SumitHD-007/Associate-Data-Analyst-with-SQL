Begin by selecting all columns from the cities table, using the SQL shortcut that selects all.
-- Select all columns from cities
SELECT *
FROM cities;


Perform an inner join with the cities table on the left and the countries table on the right; you do not need to alias tables here.
Join ON the country_code and code columns, making sure you identify them with the correct table.
SELECT * 
FROM cities
-- Inner join to countries
INNER JOIN countries
-- Match on country codes
ON cities.country_code = countries.code;

Complete the SELECT statement to keep three columns: the name of the city, the name of the country, and the region the country is located in (in this order).
Alias the name of the city AS city and the name of the country AS country.
-- Select name fields (with alias) and region 
SELECT cities.name AS city, countries.name AS country, 
countries.region
FROM cities 
INNER JOIN countries
ON cities.country_code = countries.code;


    Start with your inner join in line 5; join the tables countries AS c (left) with economies (right), aliasing economies AS e.
    Next, use code as your joining field in line 7; do not use the USING command here.
    Lastly, select the following columns in order in line 2: code from the countries table (aliased as country_code), name, year, and inflation_rate.

-- Select fields with aliases
SELECT c.code AS country_code, name, year, inflation_rate
FROM countries AS c
-- Join to economies (alias e)
INNER JOIN economies AS e
-- Match on code field using table aliases
ON c.code = e.code;


what is the best way to query all the different languages spoken in a country? 
Or, all the countries that speak a certain language?
SELECT c.name AS country, l.name AS language
FROM countries AS c
INNER JOIN languages AS l
USING(code)
WHERE l.name = 'Bhojpuri';

Suppose you are interested in the relationship between fertility and unemployment rates. 
Your task in this exercise is to join tables to return the country name, year, fertility rate, 
and unemployment rate in a single result from the countries, populations and economies tables.


    Do an inner join of countries AS c (left) with populations AS p (right), on code.
    Select name, year and fertility_rate.
-- Select relevant fields
SELECT name, year, fertility_rate 
-- Inner join countries and populations, aliased, on code
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code;


    Chain an inner join with the economies table AS e, on code.
    Select year and unemployment_rate from the economies table.
-- Select fields
SELECT name, e.year, fertility_rate, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
-- Join to economies (as e)
INNER JOIN economies as e
-- Match on country code
ON c.code = e.code;


    Modify your query so that you are joining to economies on year as well as code.
SELECT name, e.year, fertility_rate, unemployment_rate
FROM countries AS c
INNER JOIN populations AS p
ON c.code = p.country_code
INNER JOIN economies AS e
ON c.code = e.code
-- Add an additional joining condition such that you are also joining on year
	AND e.year = p.year;

Perform an inner join with cities AS c1 on the left and countries as c2 on the right.
Use code as the field to merge your tables on
SELECT 
    c1.name AS city,
    code,
    c2.name AS country,
    region,
    city_proper_pop
FROM cities AS c1
-- Perform an inner join with cities as c1 and countries as c2 on country code
INNER JOIN countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;


    Change the code to perform a LEFT JOIN instead of an INNER JOIN.
    After executing this query, have a look at how many records the query result contains.
SELECT 
	c1.name AS city, 
    code, 
    c2.name AS country,
    region, 
    city_proper_pop
FROM cities AS c1
-- Join right table (with alias)
LEFT JOIN countries AS c2
ON c1.country_code = c2.code
ORDER BY code DESC;


    Complete the LEFT JOIN with the countries table on the left and the economies table on the right on the code field.
    Filter the records from the year 2010.
SELECT name, region, gdp_percapita
FROM countries AS c
LEFT JOIN economies AS e
-- Match on code fields
ON c.code = e.code
-- Filter for the year 2010
WHERE year = 2010;



    To calculate per capita GDP per region, begin by grouping by region.
    After your GROUP BY, choose region in your SELECT statement, followed by average GDP per capita using the AVG() function, with AS avg_gdp as your alias.
-- Select region, and average gdp_percapita as avg_gdp
SELECT region, AVG(gdp_percapita) AS avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING(code)
WHERE year = 2010
-- Group by region
GROUP BY region;


    Order the result set by the average GDP per capita from highest to lowest.
    Return only the first 10 records in your result.
SELECT region, AVG(gdp_percapita) AS avg_gdp
FROM countries AS c
LEFT JOIN economies AS e
USING(code)
WHERE year = 2010
GROUP BY region
-- Order by descending avg_gdp
ORDER BY avg_gdp DESC
-- Return only first 10 records
LIMIT 10;


    Perform a full join with countries (left) and currencies (right).
    Filter for the North America region or NULL country names.
SELECT name AS country, code, region, basic_unit
FROM countries
-- Join to currencies
FULL JOIN currencies
USING (code)
-- Where region is North America or name is null
WHERE region = 'North America' OR name IS null
ORDER BY region;

Suppose you are doing some research on Melanesia and Micronesia, 
and are interested in pulling information about languages and currencies into the data 
we see for these regions in the countries table. Since languages and currencies exist in separate tables,
this will require two consecutive full joins involving the countries, languages and currencies tables.

SELECT 
	c1.name AS country, 
    region, 
    l.name AS language,
	basic_unit, 
    frac_unit
FROM countries as c1 
-- Full join with languages (alias as l)
FULL JOIN languages AS l
ON c1.code = l.code 
-- Full join with currencies (alias as c2)
FULL JOIN currencies AS c2
ON c1.code = c2.code
WHERE region LIKE 'M%esia';
